{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/about-bash-test-commands","result":{"data":{"markdownRemark":{"id":"3b524be3-7d51-5ad1-a186-6bf8b8464b52","html":"<p>이 포스트는 GNU bash, version 3.2.57(1)-release 환경에서 작성되었습니다.</p>\n<p>Bash에서 test와 [..]는 기능적으로 완전히 동일합니다.\n주어진 expression이 true로 평가되면 0을, 그렇지 않다면 1을 반환하는 <strong>커맨드</strong> 입니다.</p>\n<p>또한 Bash는 이와 비슷한 용도로 [[..]]도 제공합니다.\n[..]와 마찬가지로 주어진 expression이 true로 평가되면 0을, 그렇지 않다면 1을 반환합니다.\n[[..]]는 [..]의 적절한 번형 정도로 이해할 수 있습니다.\n[..]에 오는 대부분의 expression을 사용할 수 있기 때문입니다.\n예를 들면 다음의 예제에서 [..]는 [[..]]로 완전히 대체할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -f filename <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\n\n<span class=\"token assign-left variable\">fruit</span><span class=\"token operator\">=</span><span class=\"token string\">\"peach\"</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$fruit</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"banana\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># ${#fruit}은 문자열 fruit의 길이로 변환되는 expansion입니다.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">${<span class=\"token operator\">#</span>fruit}</span> -gt <span class=\"token number\">5</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span></code></pre></div>\n<p>위 예제에서 =는 숫자 간 비교를 위한 연산자가 아니라 <strong>문자열 비교를 위한 연산자라는 점을 주의</strong> 해야 합니다.\n&#x3C;, >, =, !=는 문자열 비교를 위한 연산자이며 두 문자열을 사전 순서대로 비교한 결과를 반환합니다.\n숫자 연산은 -gt, -ge, -lt, -le, -eq, -ne 연산자를 통해 할 수 있습니다.\n<strong>&#x3C;, > 연산자를 숫자와 함께 사용하면 그 숫자는 문자열로 판단되어 연산이 평가됩니다.\n이는 사용자가 의도한 결과와는 다를 수 있으므로 숫자 연산과 문자열 연산을 구분해서 사용해야 합니다.</strong></p>\n<p>그럼 이제 [..]와 [[..]]의 차이점을 살펴보겠습니다.</p>\n<h2 id=\"와-의-차이점\" style=\"position:relative;\"><a href=\"#%EC%99%80-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"와 의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[..]와 [[..]]의 차이점</h2>\n<h3 id=\"1-안에서---연산자를-사용할-때는-escape나-quoting해야-한다\" style=\"position:relative;\"><a href=\"#1-%EC%95%88%EC%97%90%EC%84%9C---%EC%97%B0%EC%82%B0%EC%9E%90%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8C%EB%8A%94-escape%EB%82%98-quoting%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"1 안에서   연산자를 사용할 때는 escape나 quoting해야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. [..]안에서 &#x3C;, > 연산자를 사용할 때는 escape나 quoting해야 한다.</h3>\n<p>아래 예제는 “apple”과 “cherry”를 사전 순서로 비교하는 예제입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"apple\"</span> <span class=\"token operator\">></span> <span class=\"token string\">\"cherry\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"apple > cherry\"</span>\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"apple\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"cherry\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"apple = cherry\"</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"apple &lt; cherry\"</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>위 예제를 실행해보면 “apple > cherry”가 출력되는 것을 볼 수 있습니다.\n위 설명대로 &#x3C;, >, = 연산자가 사전 순서대로 문자열을 비교한다면 “apple &#x3C; cherry”가 출력되었어야 합니다.\n왜 이런 결과가 나왔을까요?</p>\n<p>이 의문을 해결하기 위한 힌트는 위 예제를 실행한 작업 디렉토리에서 찾을 수 있습니다.\n작업 디렉토리에 가보면 cherry 파일이 생성된 것을 확인할 수 있습니다(cherry 파일이 없었을 경우).\n왜 cherry 파일이 생성되었을까요?</p>\n<p>답은 [..]의 동작방식에 있습니다. 이해를 쉽게 하기 위해 위 예제를 test를 이용해 다시 써보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token builtin class-name\">test</span> <span class=\"token string\">\"apple\"</span> <span class=\"token operator\">></span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"apple > cherry\"</span>\n<span class=\"token keyword\">elif</span> <span class=\"token builtin class-name\">test</span> <span class=\"token string\">\"apple\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"apple = cherry\"</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"apple &lt; cherry\"</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>문제가 되는 부분은 바로 <strong>test “apple” > “cherry”</strong> 입니다.\n우리는 예제에서 ’>’ 문자를 문자열 비교를 위해 사용했지만 사실 ’>‘는 output redirection이라는 다른 기능을 가지고 있습니다.\n위 예제에서 ’>‘가 output redirection으로 동작했기 떄문에 cherry라는 파일이 생긴 것입니다.\n또한 ’>‘와 “cherry”가 redirection을 위해 사용되기 때문에 test는 “apple”만을 인자로 받아 0(true)을 반환하게 됩니다.\n그래서 “apple > cherry”가 출력되게 된 것입니다.</p>\n<p>따라서 위와 같은 동작을 막기 위해서는 [..](test)에 문자열 비교를 위한 &#x3C;, > 연산자를 넘겨줄 때 아래와 같이 escape나 quoting해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"apple\"</span> <span class=\"token punctuation\">\\</span><span class=\"token operator\">></span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n<span class=\"token punctuation\">..</span>.\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"apple\"</span> <span class=\"token string\">\">\"</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>[..]와 반대로 [[..]]를 사용할 때는 아래와 같이 &#x3C;, > 연산자에 대해 escape나 quoting을 해줄 필요가 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"apple\"</span> <span class=\"token operator\">></span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>[[..]] 안에서 escape나 quoting을 해줄 필요가 없는 이유는 [[..]]가 [..]와 다르게 커맨드가 아니라 키워드이기 때문입니다.\n[..]은 expression을 공백문자로 구분해 쪼개어 각각 입력받는 일반적인 커맨드인 반면, [[..]]은 expression 그 자체를 가지고 평가합니다.</p>\n<h3 id=\"2-안에-있는-expression에는-word-splitting과-pathname-expansionfilename-expansion이-일어나지-않는다\" style=\"position:relative;\"><a href=\"#2-%EC%95%88%EC%97%90-%EC%9E%88%EB%8A%94-expression%EC%97%90%EB%8A%94-word-splitting%EA%B3%BC-pathname-expansionfilename-expansion%EC%9D%B4-%EC%9D%BC%EC%96%B4%EB%82%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\" aria-label=\"2 안에 있는 expression에는 word splitting과 pathname expansionfilename expansion이 일어나지 않는다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. [[..]]안에 있는 expression에는 word splitting과 pathname expansion(filename expansion)이 일어나지 않는다.</h3>\n<p>아래 스크립트는 변수의 값이 문자열과 같은지를 판단하는 예제입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">sentence</span><span class=\"token operator\">=</span><span class=\"token string\">\"Bash is Bourne-again shell.\"</span>\n\n<span class=\"token comment\"># correct result</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$sentence</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Bash is Bourne-again shell.\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Two strings are equal.\"</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># raise error [: too many arguments</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$sentence</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Bash is Bourne-again shell.\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Two strings are equal.\"</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>위 예제를 실행시켜보면 [[..]]을 사용한 if에서는 “Two strings are equal.”가 출력되고,\n[..]을 사용한 if에서는 [: too many arguments 에러가 발생한 것을 알 수 있습니다.</p>\n<p>word splitting이 발생하지 않는 [[..]]에서는 $sentence가 “Bash is Bourne-again shell.” 그 자체로 변환되기 때문에 원하는 결과가 나옵니다.\n하지만 [..]에서는 word splitting이 발생하기 떄문에 문자열은 “Bash” “is” “Bourne-again” “shell.”이라는 각각의 문자열로 분리되고\n이 문자열들이 모두 [..]의 argument로 들어가게 됩니다. 따라서 too many arguments 에러가 발생하게 되는 것이죠.</p>\n<p>[..]를 사용했을 때 word splitting이 발생하는 문제를 해결하기 위해서는 $sentence를 quoting해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$sentence</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Bash is Bourne-again shell.\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Two strings are equal.\"</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<h3 id=\"3-에서는-문자열-연산에서-정규식을-사용할-수-있다\" style=\"position:relative;\"><a href=\"#3-%EC%97%90%EC%84%9C%EB%8A%94-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%97%B0%EC%82%B0%EC%97%90%EC%84%9C-%EC%A0%95%EA%B7%9C%EC%8B%9D%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"3 에서는 문자열 연산에서 정규식을 사용할 수 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. [[..]]에서는 문자열 연산에서 정규식을 사용할 수 있다.</h3>\n<p>[[..]]에서 == 연산자를 사용하면 문자열이 주어진 패턴에 매치되는지를 평가하여 그 여부에 따라 0 또는 1을 리턴합니다. 아래처럼 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"Apple\"</span> <span class=\"token operator\">==</span> A__ <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$var</span> <span class=\"token operator\">==</span> A* <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span></code></pre></div>\n<p>아래와 같이 사용하면 의도한 결과를 낼 수 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># = 연산자로는 정규식 매칭을 할 수 없습니다.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"Apple\"</span> <span class=\"token operator\">=</span> A* <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># [..]로는 정규식 매칭을 할 수 없습니다.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"Apple\"</span> <span class=\"token operator\">==</span> A* <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># 정규식은 쿼우팅되면 안됩니다.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"Apple\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"A*\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span></code></pre></div>\n<p>또한, [[..]]에서 !=도 패턴 매칭을 사용합니다.</p>\n<h3 id=\"4-조건을-잇는-논리-연산자-and-or를-나타태는-방법이-다르다\" style=\"position:relative;\"><a href=\"#4-%EC%A1%B0%EA%B1%B4%EC%9D%84-%EC%9E%87%EB%8A%94-%EB%85%BC%EB%A6%AC-%EC%97%B0%EC%82%B0%EC%9E%90-and-or%EB%A5%BC-%EB%82%98%ED%83%80%ED%83%9C%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%B4-%EB%8B%A4%EB%A5%B4%EB%8B%A4\" aria-label=\"4 조건을 잇는 논리 연산자 and or를 나타태는 방법이 다르다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 조건을 잇는 논리 연산자 AND, OR를 나타태는 방법이 다르다.</h3>\n<p>[..]와 [[..]]에서는 각 조건을 AND 혹은 OR할 수 있는데, 그 방법이 약간 상이합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">${<span class=\"token operator\">#</span>var}</span> -ge <span class=\"token number\">5</span> -a <span class=\"token variable\">${<span class=\"token operator\">#</span>var}</span> -lt <span class=\"token number\">10</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"correct\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$filename</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"log\"</span> -o <span class=\"token string\">\"<span class=\"token variable\">$filename</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Log\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"correct\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># 위 스크립트와 같은 결과를 반환합니다.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">${<span class=\"token operator\">#</span>var}</span> -ge <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">${<span class=\"token operator\">#</span>var}</span> -lt <span class=\"token number\">10</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"correct\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$filename</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"log\"</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"<span class=\"token variable\">$filename</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Log\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"correct\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span></code></pre></div>\n<h2 id=\"산술연산을-조금-더-편하게-할-수-없을까\" style=\"position:relative;\"><a href=\"#%EC%82%B0%EC%88%A0%EC%97%B0%EC%82%B0%EC%9D%84-%EC%A1%B0%EA%B8%88-%EB%8D%94-%ED%8E%B8%ED%95%98%EA%B2%8C-%ED%95%A0-%EC%88%98-%EC%97%86%EC%9D%84%EA%B9%8C\" aria-label=\"산술연산을 조금 더 편하게 할 수 없을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>산술연산을 조금 더 편하게 할 수 없을까?</h2>\n<p>-eq, -gt 등을 통해 산술 연산을 하는 것은 C나 Java같은 다른 프로그래밍 언어에 익숙한 분들에게는 약간은 어색합니다.\n&#x3C;, > 등 일반적으로 프로그래밍 언어에서 사용하는 방법으로 비교 연산을 하고 싶은 경우에는 다음 예제와 같이 ((..))를 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># if [ ${#fruit} -gt 4 ]; then 과 같은 의미를 가지고 있습니다.</span>\n<span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> ${#fruit} <span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The length of <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>fruit<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> is greater than 4\"</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>또한, [..], [[..]]와는 달리 ((..))에서는 +, - 등 다른 산술 연산도 가능합니다</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> $applicant <span class=\"token operator\">></span> $capacity <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The number of applicants far exceeded capacity\"</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ol>\n<li>[..] [[..]]을 사용할 때는 문자열 연산과 숫자 연산에 쓰이는 연산자를 혼동하지 말아야 합니다.</li>\n<li>[..]에서 &#x3C;, > 연산자를 사용할 때는 escape나 quoting해줘야 합니다. [[..]]에서는 필요없습니다.</li>\n<li>[[..]]에서는 [..]와는 다르게 word splitting과 pathname expansion이 일어나지 않습니다.</li>\n<li>[[..]]에서는 == 연산자를 사용해 문자열이 정규식이 매칭되는지를 평가할 수 있습니다.</li>\n<li>[..], [[..]]은 AND와 OR를 표현하는 방법이 각각 다릅니다.</li>\n<li>수학 기호들(&#x3C;, >, == 등)을 사용하고 싶거나 산술 연산이 들어가야 하는 경우에는 [..], [[..]] 대신 ((..))를 사용합니다.</li>\n</ol>","fields":{"slug":"/posts/about-bash-test-commands","tagSlugs":["/tag/bash/"]},"frontmatter":{"date":"2018-01-17T18:50:00.000Z","description":"About bash test commands","tags":["Bash"],"title":"Bash의 [..]와 [[..]]에 대하여","socialImage":null}}},"pageContext":{"slug":"/posts/about-bash-test-commands"}},"staticQueryHashes":["1726010931","251939775","3942705351","401334301"]}